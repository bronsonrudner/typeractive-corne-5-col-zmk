/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_en_gb.h"  // https://github.com/joelspadin/zmk-locale-generator/releases/tag/v1.5.0

#define COMBO(name, timeout, keys, binding) combo_##name { timeout-ms = <timeout>; key-positions = <keys>; bindings = <&kp binding>; }
#define COMBO(NAME, TERM, KEYPOS, BINDINGS, PRIORIDLE) \
  combo_##NAME { \
    timeout-ms = <TERM>; \
    key-positions = <KEYPOS>; \
    bindings = <BINDINGS>; \
    layers = <0>; \
    require-prior-idle-ms = <PRIORIDLE> \
  };

#define HOMEROWMODCOMMON \
    compatible = "zmk,behavior-hold-tap"; \
    #binding-cells = <2>; \
    tapping-term-ms = <280>; \
    quick-tap-ms = <0>; \
    flavor = "balanced"; \
    bindings = <&kp>, <&kp>;

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        hls: homerow_shift_left {
            HOMEROWMODCOMMON
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
            hold-while-undecided;
        };
        hrs: homerow_shift_right {
            HOMEROWMODCOMMON
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
            hold-while-undecided;
        };
        hlc: homerow_control_left {
            HOMEROWMODCOMMON
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
            hold-while-undecided;
            require-prior-idle-ms = <125>;
        };
        hrc: homerow_control_right {
            HOMEROWMODCOMMON
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
            hold-while-undecided;
            require-prior-idle-ms = <125>;
        };
        hlm: homerow_other_left {
            HOMEROWMODCOMMON
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
            require-prior-idle-ms = <125>;
        };
        hrm: homerow_other_right {
            HOMEROWMODCOMMON
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
            require-prior-idle-ms = <125>;
        };
    };

    macros {
        double_shift: double_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LSHFT>, <&macro_tap &kp LSHFT>;
        };
    };
    
    /* Key positions
      ╭─────────────────╮  ╭─────────────────╮
      |  0  1  2  3  4  |  |   5  6  7  8  9 |
      | 10 11 12 13 14  |  |  15 16 17 18 19 |
      | 20 21 22 23 24  |  |  25 26 27 28 29 |
      ╰──────╮ 30 31 32 |  | 33 34 35 ╭──────╯
             ╰──────────╯  ╰──────────╯
    */
    combos {
        compatible = "zmk,combos";

        COMBO(backspace, 30, 16 17, &kp BACKSPACE, 125)
        COMBO(enter, 50, 11 12 13, &kp ENTER, -1)
        COMBO(tab, 40, 2 3, &kp TAB, 125)
        COMBO(delete, 50, 10 11, &kp DEL, -1)
        COMBO(caps, 30, 17 18, &kp CAPS, -1)
        COMBO(escape, 50, 1 2, &kp ESC, -1)

        COMBO(cut, 60, 10 11 12, &kp LC(X), -1)
        COMBO(copy, 40, 11 12, &kp LC(C), -1)
        COMBO(paste, 40, 12 13, &kp LC(V), 125)
        COMBO(undo, 50, 16 17 18, &kp LC(Z), -1)

        COMBO(pipe, 50, 0 10, &kp GB_PIPE, -1)
        COMBO(lbkt, 50, 1 11, &kp LBKT, -1)
        COMBO(rbkt, 50, 2 12, &kp RBKT, -1)
        COMBO(equal, 50, 3 13, &kp EQUAL, -1)
        COMBO(lbrc, 50, 4 14, &kp LBRC, -1)
        COMBO(rbrc, 50, 5 15, &kp RBRC, -1)
        COMBO(lpar, 50, 6 16, &kp LPAR, -1)
        COMBO(rpar, 50, 7 17, &kp RPAR, -1)
        COMBO(colon, 50, 8 18, &kp COLON, -1)
        COMBO(semicolon, 50, 9 19, &kp SEMI, -1)

        COMBO(six, 50, 10 20, &kp N6, -1)
        COMBO(four, 50, 11 21, &kp N4, -1)
        COMBO(two, 50, 12 22, &kp N2, -1)
        COMBO(zero, 50, 13 23, &kp N0, -1)
        COMBO(eight, 50, 14 24, &kp N8, -1)
        COMBO(nine, 50, 15 25, &kp N9, -1)
        COMBO(one, 50, 16 26, &kp N1, -1)
        COMBO(three, 50, 17 27, &kp N3, -1)
        COMBO(five, 50, 18 28, &kp N5, -1)
        COMBO(seven, 50, 19 29, &kp N7, -1)

        COMBO(2shift, 50, 13 14, &double_shift, -1)
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp B       &kp Y       &kp O        &kp U         &kp MINUS      &kp J      &kp L         &kp D        &kp P       &kp F
                &hlm LALT C &hlm LWIN I &hlc LCTRL E &hls LSHIFT A &kp UNDERSCORE &kp K      &hrs LSHIFT H &hrc LCTRL T &hrm LWIN N &hrm LALT S
                &kp SQT     &kp GB_DQT  &kp DOT      &kp COMMA     &kp FSLH       &kp X      &kp M         &kp G        &kp W       &kp V
                                        &trans       &lt 4 Q       &lt 2 SPACE    &lt 1 R    &lt 3 Z       &trans
            >;
        };

        SYM {
            bindings = <
                &kp EXCL     &kp GB_AT &kp GB_HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LT   &kp GT
                &kp GB_TILDE &kp GRAVE &kp LBKT    &kp RBKT &kp GB_PIPE &trans    &kp LBRC &kp RBRC &kp PLUS &kp GB_BSLH
                &trans       &trans    &trans      &trans   &trans      &trans    &trans   &trans   &trans   &trans
                                       &trans      &trans   &trans      &trans    &trans   &trans
            >;
        };

        NUM {
            bindings = <
                &trans &trans &trans &kp N8 &trans &trans &kp N9 &trans &trans &trans
                &kp N6 &kp N4 &kp N2 &kp N0 &trans &trans &kp N1 &kp N3 &kp N5 &kp N7
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
            >;
        };

        NAV {
            bindings = <
                &trans &trans &trans &trans &trans &trans &kp HOME &kp PG_UP &kp PG_DN &kp END
                &trans &trans &trans &trans &trans &kp INSERT &kp LEFT &kp UP &kp DOWN &kp RIGHT
                &trans &trans &trans &trans &trans &trans &kp C_VOL_DN &trans &trans &kp C_VOL_UP
                &trans &trans &trans &trans &trans &trans
            >;
        };

        FUN {
            bindings = <
                &kp F9 &kp F10 &kp F11 &kp F12 &trans &trans &trans &trans &trans &trans
                &kp F5 &kp F6  &kp F7  &kp F8  &trans &trans &trans &trans &trans &trans
                &kp F1 &kp F2  &kp F3  &kp F4  &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
            >;
        };
    };
};
