/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_en_gb.h"  // https://github.com/joelspadin/zmk-locale-generator/releases/tag/v1.5.0

#define LNUM 1
#define LNAV 2

#define COMBO(NAME, TERM, KEYPOS, BINDINGS, LAYERS, PRIORIDLE) \
  combo_##NAME { \
    timeout-ms = <TERM>; \
    key-positions = <KEYPOS>; \
    bindings = <BINDINGS>; \
    layers = <LAYERS>; \
    require-prior-idle-ms = <PRIORIDLE>; \
  };

#define VCOMBO(NAME, KEYPOS, BINDINGS) COMBO(NAME, 90, KEYPOS, BINDINGS, 0 LNUM, 0)

#define LKEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32
#define RKEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35
#define HOMEROWMOD(KEYS) \
    compatible = "zmk,behavior-hold-tap"; \
    #binding-cells = <2>; \
    tapping-term-ms = <280>; \
    quick-tap-ms = <0>; \
    flavor = "balanced"; \
    bindings = <&kp>, <&kp>; \
    hold-trigger-key-positions = <KEYS>; \
    hold-trigger-on-release; \
    require-prior-idle-ms = <125>;

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        hls: homerow_shift_left {
            HOMEROWMOD(RKEYS)
            hold-while-undecided;
        };
        hrs: homerow_shift_right {
            HOMEROWMOD(LKEYS)
            hold-while-undecided;
        };
        hlm: homerow_other_left {
            HOMEROWMOD(RKEYS)
        };
        hrm: homerow_other_right {
            HOMEROWMOD(LKEYS)
        };

        mslash: morph_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp GB_BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        munder: morph_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UNDERSCORE>, <&kp QUESTION>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mminus: morph_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        msqt: morph_single_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp GB_TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mdqt: morph_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GB_DQT>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ln: linger {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tdsh: tap_dance_shift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHFT>, <&kp CAPS>;
        };
    };

    macros {
        double_shift: double_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LSHFT>, <&macro_tap &kp LSHFT>;
        };
    };
    
    /* Key positions
      ╭─────────────────╮  ╭─────────────────╮
      |  0  1  2  3  4  |  |   5  6  7  8  9 |
      | 10 11 12 13 14  |  |  15 16 17 18 19 |
      | 20 21 22 23 24  |  |  25 26 27 28 29 |
      ╰──────╮ 30 31 32 |  | 33 34 35 ╭──────╯
             ╰──────────╯  ╰──────────╯
    */
    combos {
        compatible = "zmk,combos";

        COMBO(backspace, 30, 16 17, &kp BACKSPACE, 0 LNUM, 125)
        COMBO(enter, 50, 11 12 13, &kp ENTER, 0 LNUM, 0)
        COMBO(tab, 25, 2 3, &kp TAB, 0 LNUM, 125)
        COMBO(delete, 50, 10 11, &kp DEL, 0 LNUM, 0)
        COMBO(escape, 60, 0 1 2, &kp ESC, 0 LNUM, 125)

        COMBO(cut, 60, 10 11 12, &kp LC(X), 0 LNUM, 125)
        COMBO(copy, 35, 11 12, &kp LC(C), 0 LNUM, 125)
        COMBO(paste, 27, 12 13, &kp LC(V), 0 LNUM, 125)

        VCOMBO(semicolon, 0 10, &kp SEMI)
        VCOMBO(lbkt, 1 11, &kp LBKT)
        VCOMBO(rbkt, 2 12, &kp RBKT)
        VCOMBO(equal, 3 13, &kp EQUAL)
        VCOMBO(pipe, 4 14, &kp GB_PIPE)
        COMBO(z, 90, 5 15, &kp Z, 0 LNUM, 0)
        VCOMBO(lpar, 6 16, &kp LPAR)
        VCOMBO(rpar, 7 17, &kp RPAR)
        VCOMBO(colon, 8 18, &kp COLON)
        COMBO(q, 90, 9 19, &kp Q, 0 LNUM, 0)

        VCOMBO(excl, 10 20, &kp EXCL)
        VCOMBO(at, 11 21, &kp GB_AT)
        VCOMBO(hash, 12 22, &kp GB_HASH)
        VCOMBO(dollar, 13 23, &kp DLLR)
        VCOMBO(percent, 14 24, &kp PRCNT)
        VCOMBO(caret, 15 25, &kp CARET)
        VCOMBO(ampersand, 16 26, &kp AMPS)
        VCOMBO(star, 17 27, &kp STAR)
        VCOMBO(lt, 18 28, &kp LT)
        VCOMBO(gt, 19 29, &kp GT)

        COMBO(2shift, 50, 13 14, &double_shift, 0, 0)
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp B       &kp Y       &kp O        &kp U          &mminus        &kp J      &kp L        &kp D        &kp P       &kp F
                &hlm LALT C &hlm LWIN I &hls LCTRL E &hls LSHFT A   &munder        &kp K      &hrs LSHFT H &hrs LCTRL T &hrm LWIN N &hrm LALT S
                &msqt       &mdqt       &kp DOT      &kp COMMA      &mslash        &kp X      &kp M        &kp G        &kp W       &kp V
                                        &trans       &trans         &lt LNUM SPACE &lt LNAV R &tdsh        &trans
            >;
        };

        NUM {
            bindings = <
                &kp F9 &kp F10 &kp F11 &kp F12 &trans     &trans &kp N7 &kp N8 &kp N9 &trans
                &kp F5 &kp F6  &kp F7  &kp F8  &trans     &trans &kp N4 &kp N5 &kp N6 &kp N0
                &kp F1 &kp F2  &kp F3  &kp F4  &trans     &trans &kp N1 &kp N2 &kp N3 &trans
                                 &trans &trans &trans     &trans &trans &trans
            >;
        };

        NAV {
            bindings = <
                &trans &trans &trans &trans &trans &trans &kp HOME &kp PG_UP &kp PG_DN &kp END
                &trans &trans &trans &trans &trans &kp INSERT &kp LEFT &kp UP &kp DOWN &kp RIGHT
                &trans &trans &trans &trans &trans &trans &kp C_VOL_DN &trans &trans &kp C_VOL_UP
                &trans &trans &trans &trans &trans &trans
            >;
        };
    };
};
