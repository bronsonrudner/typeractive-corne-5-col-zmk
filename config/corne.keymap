/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_en_gb.h"  // https://github.com/joelspadin/zmk-locale-generator/releases/tag/v1.5.0

#define POUND GB_POUND_SIGN

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "balanced";  // tap when rolling
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        double_shift: double_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LSHFT>, <&macro_tap &kp LSHFT>;
        };
    };

    //  0  1  2  3  4    5  6  7  8  9
    // 10 11 12 13 14   15 16 17 18 19
    // 20 21 22 23 24   25 26 27 28 29
    //       30 31 32   33 34 35
    combos {
        compatible = "zmk,combos";
        combo_backspace {
            timeout-ms = <30>;
            key-positions = <16 17>;
            bindings = <&kp BACKSPACE>;
        };
        combo_enter {
            timeout-ms = <50>;
            key-positions = <11 12 13>;
            bindings = <&kp ENTER>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };
        combo_delete {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp DEL>;
        };
        combo_caps {
            timeout-ms = <30>;
            key-positions = <17 18>;
            bindings = <&kp CAPS>;
        };
        combo_escape {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };

        combo_cut {
            timeout-ms = <60>;
            key-positions = <10 11 12>;
            bindings = <&kp LC(X)>;
        };
        combo_copy {
            timeout-ms = <40>;
            key-positions = <11 12>;
            bindings = <&kp LC(C)>;
        };
        combo_paste {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&kp LC(V)>;
        };
        combo_undo {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&kp LC(Z)>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp EQUAL>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LPAR>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp RPAR>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <8 18>;
            bindings = <&kp COLON>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp SEMI>;
        };

        combo_2shift {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&double_shift>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp SQT    &kp GB_DQT &kp DOT     &kp COMMA    &kp MINUS      &kp X      &kp M        &kp G       &kp W      &kp V
                &hm LALT C &hm LWIN I &hm LCTRL E &hm LSHIFT A &kp UNDERSCORE &kp K      &hm LSHIFT H &hm LCTRL T &hm LWIN N &hm LALT S
                &kp B      &kp Y      &kp O       &kp U        &kp FSLH       &kp J      &kp L        &kp D       &kp P      &kp F
                                      &trans      &lt 4 Q      &lt 2 SPACE    &lt 1 R    &lt 3 Z      &trans
            >;
        };

        SYM {
            bindings = <
                &kp EXCL     &kp GB_AT &kp GB_HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LT   &kp GT
                &kp GB_TILDE &kp GRAVE &kp LBKT    &kp RBKT &kp GB_PIPE &trans    &kp LBRC &kp RBRC &kp PLUS &kp GB_BSLH
                &trans       &trans    &trans      &trans   &trans      &trans    &trans   &trans   &trans   &trans
                                       &trans      &trans   &trans      &trans    &trans   &trans
            >;
        };

        NUM {
            bindings = <
                &trans &trans &trans &kp N8 &trans &trans &kp N9 &trans &trans &trans
                &kp N6 &kp N4 &kp N2 &kp N0 &trans &trans &kp N1 &kp N3 &kp N5 &kp N7
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
            >;
        };

        NAV {
            bindings = <
                &trans &trans &trans &trans &trans &trans &kp HOME &kp PG_UP &kp PG_DN &kp END
                &trans &trans &trans &trans &trans &kp INSERT &kp LEFT &kp UP &kp DOWN &kp RIGHT
                &trans &trans &trans &trans &trans &trans &kp C_VOL_DN &trans &trans &kp C_VOL_UP
                &trans &trans &trans &trans &trans &trans
            >;
        };

        FUN {
            bindings = <
                &kp F9 &kp F10 &kp F11 &kp F12 &trans &trans &trans &trans &trans &trans
                &kp F5 &kp F6  &kp F7  &kp F8  &trans &trans &trans &trans &trans &trans
                &kp F1 &kp F2  &kp F3  &kp F4  &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans &trans &trans
            >;
        };
    };
};
