/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_en_gb.h"  // https://github.com/joelspadin/zmk-locale-generator/releases/tag/v1.5.0

#define LTAP 1
#define LNUM 2
#define LNAV 3
#define LCAP 4

#define COMBO(NAME, TERM, KEYPOS, BINDINGS, LAYERS, PRIORIDLE) \
  combo_##NAME { \
    timeout-ms = <TERM>; \
    key-positions = <KEYPOS>; \
    bindings = <BINDINGS>; \
    layers = <LAYERS>; \
    require-prior-idle-ms = <PRIORIDLE>; \
  };

#define VCOMBO(NAME, KEYPOS, BINDINGS1, BINDINGS2) \
  COMBO(NAME, 110, KEYPOS, BINDINGS1, 0 LNUM LCAP, 0) \
  COMBO(s_##NAME, 110, KEYPOS, BINDINGS2, LTAP, 0)

#define LKEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32
#define RKEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35
#define HOMEROWMOD(KEYS) \
    compatible = "zmk,behavior-hold-tap"; \
    #binding-cells = <2>; \
    tapping-term-ms = <280>; \
    quick-tap-ms = <180>; \
    flavor = "balanced"; \
    bindings = <&kp>, <&kp>; \
    hold-trigger-key-positions = <KEYS>; \
    hold-trigger-on-release; \
    require-prior-idle-ms = <125>;

&sl {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        hls: homerow_shift_left {
            HOMEROWMOD(RKEYS)
            hold-while-undecided;
        };
        hrs: homerow_shift_right {
            HOMEROWMOD(LKEYS)
            hold-while-undecided;
        };
        hlm: homerow_other_left {
            HOMEROWMOD(RKEYS)
        };
        hrm: homerow_other_right {
            HOMEROWMOD(LKEYS)
        };

        ln: linger {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        double_shift: double_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LSHFT>, <&macro_tap &kp LSHFT>;
        };

        spaces: spaces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp SPACE>, <&macro_tap &kp SPACE>, <&macro_tap &kp SPACE>, <&macro_tap &kp SPACE>;
        };

        brcs: brcs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LBRC>, <&macro_tap &kp RBRC>;
        };
    };
    
    /* Key positions
      ╭─────────────────╮  ╭─────────────────╮
      |  0  1  2  3  4  |  |   5  6  7  8  9 |
      | 10 11 12 13 14  |  |  15 16 17 18 19 |
      | 20 21 22 23 24  |  |  25 26 27 28 29 |
      ╰──────╮ 30 31 32 |  | 33 34 35 ╭──────╯
             ╰──────────╯  ╰──────────╯
    */
    combos {
        compatible = "zmk,combos";

        COMBO(backspace, 30, 16 17, &hrs LC(LSHFT) BACKSPACE, 0 LNUM LCAP, 125)
        COMBO(c_backspace, 30, 16 17, &kp LC(BACKSPACE), LTAP, 125)
        COMBO(esc, 70, 11 12 13, &hlm LWIN(LC(LSHFT)) ESC, 0 LNUM LCAP, 0)
        COMBO(enter, 70, 16 17 18, &kp ENTER, 0 LNUM LCAP, 0)
        COMBO(win, 25, 11 12, &kp LWIN, 0, 125)
        COMBO(tab, 25, 12 13, &hls LC(LSHFT) TAB, 0 LNUM LCAP, 125)
        COMBO(s_tab, 25, 12 13, &kp LS(TAB), LTAP, 125)
        COMBO(del, 25, 2 3, &kp DEL, 0 LNUM LCAP, 125)
        COMBO(c_del, 25, 2 3, &kp LC(DEL), LTAP, 125)

        COMBO(q, 25, 6 7, &kp Q, 0 LNUM, 0)
        COMBO(s_q, 25, 6 7, &kp LS(Q), LCAP LTAP, 0)
        COMBO(z, 25, 26 27, &kp Z, 0 LNUM, 0)
        COMBO(s_z, 25, 26 27, &kp LS(Z), LCAP LTAP, 0)

        COMBO(cut, 60, 21 22 23, &kp LC(X), 0, 125)
        COMBO(copy, 35, 21 22, &kp LC(C), 0, 125)
        COMBO(paste, 35, 22 23, &kp LC(V), 0, 125)

        COMBO(c_left, 110, 6 16, &kp LC(LEFT), LNAV, 0)
        COMBO(c_right, 110, 9 19, &kp LC(RIGHT), LNAV, 0)
        COMBO(bt_clear, 70, 1 2 3, &bt BT_CLR, LNAV, 0)
        COMBO(bt_sel1, 70, 11 12 13, &bt BT_SEL 0, LNAV, 0)
        COMBO(bt_sel2, 70, 21 22 23, &bt BT_SEL 1, LNAV, 0)

        VCOMBO(lbkt, 1 11, &kp LBKT, &kp LBKT)
        VCOMBO(rbkt, 2 12, &kp RBKT, &kp EXCL)
        VCOMBO(equal, 3 13, &kp EQUAL, &kp PLUS)
        VCOMBO(pipe, 4 14, &kp GB_PIPE, &kp GB_PIPE)
        VCOMBO(ampersand, 5 15, &kp AMPS, &kp AMPS)
        VCOMBO(lpar, 6 16, &kp LPAR, &kp LT)
        VCOMBO(rpar, 7 17, &kp RPAR, &kp GT)
        VCOMBO(colon, 8 18, &kp COLON, &kp COLON)

        VCOMBO(star, 11 21, &kp STAR, &kp STAR)
        VCOMBO(percent, 14 24, &kp PRCNT, &kp PRCNT)
        VCOMBO(caret, 15 25, &kp CARET, &kp CARET)
        VCOMBO(lbrc, 16 26, &kp LBRC, &kp LBRC)
        VCOMBO(rbrc, 17 27, &kp RBRC, &kp RBRC)
        VCOMBO(semi, 18 28, &kp SEMI, &kp SEMI)

        COMBO(2shift, 50, 13 14, &double_shift, 0, 0)
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp B       &kp Y       &kp O        &kp U            &kp MINUS      &kp J      &kp L        &kp D        &kp P       &kp F
                &hlm LALT C &hlm LWIN I &hls LCTRL E &hls LSHFT A     &kp UNDERSCORE &kp K      &hrs LSHFT H &hrs LCTRL T &hrm LWIN N &hrm LALT S
                &kp SQT     &kp GB_DQT  &kp DOT      &kp COMMA        &kp FSLH       &kp X      &kp M        &kp G        &kp W       &kp V
                                        &trans       &lt LCAP ENTER   &lt LNUM SPACE &lt LNAV R &sl LTAP     &trans
            >;
        };

        TAP {
            bindings = <
                &kp LS(B)    &kp LS(Y) &kp LS(O)   &kp LS(U)   &kp GB_AT     &kp LS(J)  &kp LS(L) &kp LS(D) &kp LS(P) &kp LS(F)
                &kp LS(C)    &kp LS(I) &kp LS(E)   &kp LS(A)   &kp QUESTION  &kp LS(K)  &kp LS(H) &kp LS(T) &kp LS(N) &kp LS(S)
                &kp GB_TILDE &kp GRAVE &kp GB_HASH &kp DLLR    &kp GB_BSLH   &kp LS(X)  &kp LS(M) &kp LS(G) &kp LS(W) &kp LS(V)
                                       &trans      &trans      &trans        &kp LS(R)  &kp ESC   &trans
            >;
        };

        NUM {
            bindings = <
                &kp F9       &kp F10      &kp F11       &kp F12        &trans        &trans         &kp N7        &kp N8        &kp N9       &trans
                &hlm LALT F5 &hlm LWIN F6 &hls LCTRL F7 &hls LSHFT F8  &trans        &kp DOT        &hls LSHFT N4 &hls LCTRL N5 &hlm LWIN N6 &hlm LALT N0
                &kp F1       &kp F2       &kp F3        &kp F4         &trans        &trans         &kp N1        &kp N2        &kp N3       &trans
                                          &trans        &trans         &trans        &lt LNAV SPACE &trans        &trans
            >;
        };

        NAV {
            bindings = <
                &trans &trans &trans &trans &trans     &trans     &kp HOME     &kp PG_UP &kp PG_DN &kp END
                &trans &trans &trans &trans &trans     &kp INSERT &kp LEFT     &kp UP    &kp DOWN  &kp RIGHT
                &trans &trans &trans &trans &trans     &trans     &kp C_VOL_DN &trans    &trans    &kp C_VOL_UP
                              &trans &trans &trans     &trans     &trans       &trans
            >;
        };

        CAP {
            bindings = <
                &kp LS(B)       &kp LS(Y)       &kp LS(O)        &kp LS(U)        &trans        &kp LS(J)  &kp LS(L) &kp LS(D) &kp LS(P) &kp LS(F)
                &hlm LALT LS(C) &hlm LWIN LS(I) &hls LCTRL LS(E) &hls LSHFT LS(A) &trans        &kp LS(K)  &kp LS(H) &kp LS(T) &kp LS(N) &kp LS(S)
                &trans          &trans          &trans           &trans           &trans        &kp LS(X)  &kp LS(M) &kp LS(G) &kp LS(W) &kp LS(V)
                                                &trans           &trans           &trans        &kp LS(R)  &trans    &trans
            >;
        };
    };
};
